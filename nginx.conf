upstream webtorrent-frontends {
  server 127.0.0.1:7600;
}

server {
  listen      50.116.11.184:80;
  # listen      50.116.11.184:443 ssl;
  server_name webtorrent.io;

  # Use large keepalive timeout for faster subsequent connections
  keepalive_timeout 150;

  # SSL configuration
  # ssl_certificate /home/feross/www/webtorrent.io/secret/apstudynotes.org.chained.crt;
  # ssl_certificate_key /home/feross/www/webtorrent.io/secret/apstudynotes.org.key;

  # Allow file uploads
  client_max_body_size 50M;

  # Only retry if there was a communication error, not a timeout
  # on the app server (to avoid propagating "queries of death"
  # to all frontends)
  proxy_next_upstream error;

  # If node has an error then nginx will intercept it if there is
  # an error_page directive for that error code. So far, just doing
  # this for 50x errors.
  proxy_intercept_errors on;

  root /home/feross/www/webtorrent.io/static;
  index index.html;

  error_page 501 502 503 504 /50x.html;

  # If there is no static file, send it to Node
  location @node {
    proxy_pass_header Server;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass http://webtorrent-frontends;
    proxy_intercept_errors on;
    error_page 501 502 503 504 /50x.html;
  }

  # Serve 500 file
  location = /50x.html {
    root /home/feross/www/studynotes.org/static;
  }

  # DON'T serve static files -- pass everything to node
  try_files /maintainence.html @node;
}

server {
  listen      50.116.11.184:80;
  server_name www.webtorrent.io;
  rewrite ^   http://webtorrent.io$request_uri permanent;
}
